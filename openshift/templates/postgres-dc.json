{
  "kind": "Template",
  "apiVersion": "v1",
  "metadata": {
    "name": "postgres-dc"
  },
  "labels": {
	"template": "postgres-dc",
	"app": "classy-postgresql"
  },
  "parameters": [
		{
		  "name": "APP_NAME",
		  "required": true,
		  "value": "classy"
		},
		{
		  "name": "NAME_SUFFIX",
		  "required": true
		},
		{
		  "name": "ENV_NAME",
		  "required": true
		},
		{
		  "name": "APP_IMAGE_TAG",
		  "required": true
		},
		{
		  "name": "SOURCE_REPOSITORY_URL",
		  "required": true
		},	
		{
		  "name": "SOURCE_REPOSITORY_REF",
		  "required": true,
		  "value": "openshift"
		},
		{
		  "name": "DATABASE_USER",
		  "displayName": "Database Username",
		  "required": true,
		  "value": "django"
		},
		{
		  "name": "DATABASE_PASSWORD",
		  "displayName": "Database User Password",
		  "generate": "expression",
		  "from": "[a-zA-Z0-9]{16}"
		},
		{
		  "name": "DJANGO_SECRET_KEY",
		  "displayName": "Django Secret Key",
		  "description": "Set this to a long random string.",
		  "generate": "expression",
		  "from": "[\\w]{60}"
		},
		{
		  "name": "DATABASE_NAME",
		  "displayName": "Database Name",
		  "required": true,
		  "value": "default"
		},
		{
		  "name": "DATABASE_SERVICE_NAME",
		  "displayName": "Database Service Name",
		  "required": true,
		  "value": "postgresql"
		},
		{
		  "name": "DATABASE_ENGINE",
		  "displayName": "Database Engine",
		  "required": true,
		  "description": "Database engine: postgresql, mysql or sqlite (default).",
		  "value": "postgresql"
		},
		{
		  "name": "APP_CONFIG",
		  "displayName": "Application Configuration File Path",
		  "description": "Relative path to Gunicorn configuration file (optional)."
		},
		{
		  "name": "MEMORY_LIMIT",
		  "displayName": "Memory Limit",
		  "required": true,
		  "description": "Maximum amount of memory the Django container can use.",
		  "value": "8Gi"
		},
		{
		  "name": "MEMORY_POSTGRESQL_LIMIT",
		  "displayName": "Memory Limit (PostgreSQL)",
		  "required": true,
		  "description": "Maximum amount of memory the PostgreSQL container can use.",
		  "value": "512Mi"
		},
		{
		  "name": "POSTGRESQL_VERSION",
		  "displayName": "Version of PostgreSQL Image",
		  "description": "Version of PostgreSQL image to be used (10 or latest).",
		  "value": "latest",
		  "required": true
		}
  ],
  "objects": [
	{
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "name": "${DATABASE_SERVICE_NAME}",
        "annotations": {
          "description": "Exposes the database server"
        }
      },
      "spec": {
        "ports": [
          {
            "name": "postgresql",
            "port": 5432,
            "targetPort": 5432
          }
        ],
        "selector": {
          "name": "${DATABASE_SERVICE_NAME}"
        }
      }
    },
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${DATABASE_SERVICE_NAME}",
        "annotations": {
          "description": "Defines how to deploy the database",
          "template.alpha.openshift.io/wait-for-ready": "true"
        }
      },
      "spec": {
        "strategy": {
          "type": "Recreate"
        },
        "triggers": [
			{
            "type": "ImageChange",
            "imageChangeParams": {
              "automatic": true,
              "containerNames": [
                "postgresql"
              ],
              "from": {
                "kind": "ImageStreamTag",
                "namespace": "openshift",
                "name": "postgresql:${POSTGRESQL_VERSION}"
              }
            }
          },
          {
            "type": "ConfigChange"
          }
        ],
        "replicas": 1,
        "selector": {
          "name": "${DATABASE_SERVICE_NAME}"
        },
        "template": {
          "metadata": {
            "name": "${DATABASE_SERVICE_NAME}",
            "labels": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          },
          "spec": {
            "volumes": [
              {
                "name": "${DATABASE_SERVICE_NAME}-data",
                "persistentVolumeClaim": {
                  "claimName": "${DATABASE_SERVICE_NAME}"
                }
              }
            ],
            "containers": [
              {
                "name": "postgresql",
                "image": " ",
                "ports": [
                  {
                    "containerPort": 5432
                  }
                ],
                "env": [
                  {
                    "name": "POSTGRESQL_USER",
                    "valueFrom": {
                      "secretKeyRef" : {
                        "name" : "${APP_NAME}",
                        "key" : "database-user"
                      }
                    }
                  },
                  {
                    "name": "POSTGRESQL_PASSWORD",
                    "valueFrom": {
                      "secretKeyRef" : {
                        "name" : "${APP_NAME}",
                        "key" : "database-password"
                      }
                    }
                  },
                  {
                    "name": "POSTGRESQL_DATABASE",
                    "value": "${DATABASE_NAME}"
                  }
                ],
                "volumeMounts": [
                  {
                    "name": "${DATABASE_SERVICE_NAME}-data",
                    "mountPath": "/var/lib/pgsql/data"
                  }
                ],
                "readinessProbe": {
                  "timeoutSeconds": 1,
                  "initialDelaySeconds": 10,
                  "exec": {
                    "command": [ "/usr/libexec/check-container" ]
                  }
                },
                "livenessProbe": {
                  "timeoutSeconds": 10,
                  "initialDelaySeconds": 120,
                  "exec": {
                    "command": [ "/usr/libexec/check-container", "--live" ]
                  }
                },
                "resources": {
                  "limits": {
                    "memory": "${MEMORY_POSTGRESQL_LIMIT}"
                  }
                }
              }
            ]
          }
        }
      }
	}
   ]
}